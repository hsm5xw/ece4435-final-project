-- VHDL Entity lab10_TopLevel_lib.TopLevel.symbol
--
-- Created:
--          by - Hong.Hong (HSM)
--          at - 22:32:49 04/27/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2013.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY TopLevel IS
   GENERIC( 
      AddressBits : POSITIVE := 16;
      n           : POSITIVE := 16;
      BitWidth    : POSITIVE := 16;
      RegWidth    : POSITIVE := 16;
      RegSel      : POSITIVE := 4
   );
   PORT( 
      clk                         : IN     std_logic;
      interrupt                   : IN     std_logic  := '0';
      reset                       : IN     std_logic  := '0';
      decode_pcval_out_TrackerOut : OUT    std_logic_vector (RegWidth-1 DOWNTO 0)
   );

-- Declarations

END TopLevel ;

--
-- VHDL Architecture lab10_TopLevel_lib.TopLevel.struct
--
-- Created:
--          by - Hong.Hong (HSM)
--          at - 09:15:52 04/29/14
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2013.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.numeric_std.all;
USE ieee.std_logic_unsigned.all;
LIBRARY std;
USE std.textio.all;

LIBRARY lab10_memory_stage_lib;
LIBRARY lab10_RegFile_lib;
LIBRARY lab10_WriteBack_Stage_lib;
LIBRARY lab11_MemoryArbiter_lib;
LIBRARY lab11_RegisterTracker_lib;
LIBRARY lab12_Memory_lib;
LIBRARY lab7_lib;
LIBRARY lab8_new_lib;
LIBRARY lab9_new_lib;

ARCHITECTURE struct OF TopLevel IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL Addr                : std_logic_vector(15 DOWNTO 0);
   SIGNAL Addr_toMemory       : std_logic_vector(15 DOWNTO 0);
   SIGNAL Control             : std_logic_vector(n-1 DOWNTO 0);
   SIGNAL Control_Out         : std_logic_vector(2 DOWNTO 0);
   SIGNAL Control_toRegFile   : std_logic;
   SIGNAL Control_toWB        : std_logic;
   SIGNAL DataOut             : std_logic_vector(BitWidth-1 DOWNTO 0);
   SIGNAL Data_Store          : std_logic_vector(15 DOWNTO 0);
   SIGNAL Dest                : std_logic_vector(3 DOWNTO 0);
   SIGNAL Dest_Execute_Out    : std_logic_vector(3 DOWNTO 0);
   SIGNAL Dest_toRegFile      : std_logic_vector(3 DOWNTO 0);
   SIGNAL Dest_toWB           : std_logic_vector(3 DOWNTO 0);
   SIGNAL Extra               : std_logic_vector(15 DOWNTO 0);
   SIGNAL Extra_Execute_Out   : std_logic_vector(15 DOWNTO 0);
   SIGNAL L                   : std_logic_vector(15 DOWNTO 0);
   SIGNAL R                   : std_logic_vector(15 DOWNTO 0);
   SIGNAL R1                  : std_logic;
   SIGNAL RD0                 : std_logic_vector(RegWidth-1 DOWNTO 0);
   SIGNAL RD1                 : std_logic_vector(RegWidth-1 DOWNTO 0);
   SIGNAL ReadAddr_0          : std_logic_vector(RegSel-1 DOWNTO 0);
   SIGNAL ReadAddr_1          : std_logic_vector(RegSel-1 DOWNTO 0);
   SIGNAL RegWrite_current    : std_logic;
   SIGNAL Result              : std_logic_vector(15 DOWNTO 0);
   SIGNAL Value_toRegFile     : std_logic_vector(15 DOWNTO 0);
   SIGNAL Value_toWB          : std_logic_vector(15 DOWNTO 0);
   SIGNAL W                   : std_logic;
   SIGNAL Write_Control       : std_logic;
   SIGNAL can_move_on         : std_logic;
   SIGNAL decode_pcval_out    : std_logic_vector(15 DOWNTO 0);
   SIGNAL dependsOn_op1       : std_logic;
   SIGNAL dependsOn_op2       : std_logic;
   SIGNAL inst                : std_logic_vector(15 DOWNTO 0);
   SIGNAL jaddress            : std_logic_vector(15 DOWNTO 0);
   SIGNAL jump                : std_logic;
   SIGNAL maddr               : std_logic_vector(15 DOWNTO 0);
   SIGNAL mdelay_toFetchStage : std_logic;
   SIGNAL mdelay_toMemStage   : std_logic;
   SIGNAL pcval               : std_logic_vector(15 DOWNTO 0);
   SIGNAL stall               : std_logic;


   -- Component Declarations
   COMPONENT memory_stage
   PORT (
      Control      : IN     std_logic_vector (2 DOWNTO 0);
      Data_In      : IN     std_logic_vector (15 DOWNTO 0);
      Dest         : IN     std_logic_vector (3 DOWNTO 0);
      Extra        : IN     std_logic_vector (15 DOWNTO 0);
      Result       : IN     std_logic_vector (15 DOWNTO 0);
      clk          : IN     std_logic;
      mdelay       : IN     std_logic;
      Addr         : OUT    std_logic_vector (15 DOWNTO 0);
      Control_toWB : OUT    std_logic;
      Data_Store   : OUT    std_logic_vector (15 DOWNTO 0);
      Dest_toWB    : OUT    std_logic_vector (3 DOWNTO 0);
      R            : OUT    std_logic;
      Value_toWB   : OUT    std_logic_vector (15 DOWNTO 0);
      W            : OUT    std_logic;
      stall        : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT RegisterFile
   GENERIC (
      RegWidth : positive := 16;      -- The number of bits in each register
      RegSel   : positive := 4
   );
   PORT (
      ReadAddr_0   : IN     std_logic_vector (RegSel-1 DOWNTO 0);
      ReadAddr_1   : IN     std_logic_vector (RegSel-1 DOWNTO 0);
      WD           : IN     std_logic_vector (RegWidth-1 DOWNTO 0);
      WriteAddr    : IN     std_logic_vector (RegSel-1 DOWNTO 0);
      clock        : IN     std_logic;
      write_enable : IN     std_logic;
      RD0          : OUT    std_logic_vector (RegWidth-1 DOWNTO 0);
      RD1          : OUT    std_logic_vector (RegWidth-1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT lab10_WriteBack_Stage
   PORT (
      Control           : IN     std_logic;
      Dest              : IN     std_logic_vector (3 DOWNTO 0);
      Value             : IN     std_logic_vector (15 DOWNTO 0);
      clk               : IN     std_logic;
      Control_toRegFile : OUT    std_logic;
      Dest_toRegFile    : OUT    std_logic_vector (3 DOWNTO 0);
      Value_toRegFile   : OUT    std_logic_vector (15 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT MemoryArbiter
   PORT (
      Addr_fromFetchStage : IN     std_logic_vector (15 DOWNTO 0);
      Addr_fromMemStage   : IN     std_logic_vector (15 DOWNTO 0);
      R                   : IN     std_logic;
      W                   : IN     std_logic;
      reset               : IN     std_logic;
      Addr_toMemory       : OUT    std_logic_vector (15 DOWNTO 0);
      Write_Control       : OUT    std_logic;
      mdelay_toFetchStage : OUT    std_logic;
      mdelay_toMemStage   : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT RegisterFile_Tracker
   GENERIC (
      RegWidth  : positive := 16;      -- The number of bits in each register
      addr_size : positive := 4
   );
   PORT (
      Clear_WriteAddr             : IN     std_logic_vector (addr_size-1 DOWNTO 0);
      Mark_WriteAddr              : IN     std_logic_vector (addr_size-1 DOWNTO 0);
      ReadAddr_0                  : IN     std_logic_vector (addr_size-1 DOWNTO 0);
      ReadAddr_1                  : IN     std_logic_vector (addr_size-1 DOWNTO 0);
      RegWrite_current            : IN     std_logic;
      RegWrite_previous           : IN     std_logic;
      clock                       : IN     std_logic;
      decode_pcval_out            : IN     std_logic_vector (RegWidth-1 DOWNTO 0);
      dependsOn_op1               : IN     std_logic;
      dependsOn_op2               : IN     std_logic;
      reset                       : IN     std_logic;
      can_move_on                 : OUT    std_logic;
      decode_pcval_out_TrackerOut : OUT    std_logic_vector (RegWidth-1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT SRAM
   PORT (
      Addr    : IN     std_logic_vector (15 DOWNTO 0);
      DataIn  : IN     std_logic_vector (15 DOWNTO 0);
      clock   : IN     std_logic;
      we      : IN     std_logic;
      DataOut : OUT    std_logic_vector (15 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT fetch_stage
   PORT (
      can_move_on : IN     std_logic;
      clk         : IN     std_logic;
      interrupt   : IN     std_logic  := '0';
      jaddr       : IN     std_logic_vector (15 DOWNTO 0);
      jump        : IN     std_logic  := '0';
      mdata       : IN     std_logic_vector (15 DOWNTO 0);
      mdelay      : IN     std_logic  := '0';
      reset       : IN     std_logic  := '0';
      stall       : IN     std_logic;
      inst        : OUT    std_logic_vector (15 DOWNTO 0);
      maddr       : OUT    std_logic_vector (15 DOWNTO 0);
      pcval       : OUT    std_logic_vector (15 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT Decode_stage
   GENERIC (
      n           : POSITIVE := 24;      -- control output length
      n_toExecute : POSITIVE := 16       -- control output length, sent to the execute stage
   );
   PORT (
      RD0              : IN     std_logic_vector (15 DOWNTO 0);
      RD1              : IN     std_logic_vector (15 DOWNTO 0);
      can_move_on      : IN     std_logic;
      clock            : IN     std_logic;
      inst             : IN     std_logic_vector (15 DOWNTO 0);
      jump             : IN     std_logic;
      pcval            : IN     std_logic_vector (15 DOWNTO 0);
      stall            : IN     std_logic;
      A0               : OUT    std_logic_vector (3 DOWNTO 0);
      A1               : OUT    std_logic_vector (3 DOWNTO 0);
      Control          : OUT    std_logic_vector (n_toExecute-1 DOWNTO 0);
      Dest             : OUT    std_logic_vector (3 DOWNTO 0);
      Extra            : OUT    std_logic_vector (15 DOWNTO 0);
      L                : OUT    std_logic_vector (15 DOWNTO 0);
      R                : OUT    std_logic_vector (15 DOWNTO 0);
      RegWrite_current : OUT    std_logic;
      decode_pcval_out : OUT    std_logic_vector (15 DOWNTO 0);
      dependsOn_op1    : OUT    std_logic;
      dependsOn_op2    : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT execute_stage
   PORT (
      Control           : IN     std_logic_vector (15 DOWNTO 0);
      Dest              : IN     std_logic_vector (3 DOWNTO 0);
      Extra             : IN     std_logic_vector (15 DOWNTO 0);
      L                 : IN     std_logic_vector (15 DOWNTO 0);
      R                 : IN     std_logic_vector (15 DOWNTO 0);
      can_move_on       : IN     std_logic;
      clk               : IN     std_logic;
      pcval             : IN     std_logic_vector (15 DOWNTO 0);
      rst               : IN     std_logic;
      stall             : IN     std_logic;
      Control_Out       : OUT    std_logic_vector (2 DOWNTO 0);
      Dest_Execute_Out  : OUT    std_logic_vector (3 DOWNTO 0);
      Extra_Execute_Out : OUT    std_logic_vector (15 DOWNTO 0);
      Result            : OUT    std_logic_vector (15 DOWNTO 0);
      jaddress          : OUT    std_logic_vector (15 DOWNTO 0);
      jump              : OUT    std_logic
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : Decode_stage USE ENTITY lab8_new_lib.Decode_stage;
   FOR ALL : MemoryArbiter USE ENTITY lab11_MemoryArbiter_lib.MemoryArbiter;
   FOR ALL : RegisterFile USE ENTITY lab10_RegFile_lib.RegisterFile;
   FOR ALL : RegisterFile_Tracker USE ENTITY lab11_RegisterTracker_lib.RegisterFile_Tracker;
   FOR ALL : SRAM USE ENTITY lab12_Memory_lib.SRAM;
   FOR ALL : execute_stage USE ENTITY lab9_new_lib.execute_stage;
   FOR ALL : fetch_stage USE ENTITY lab7_lib.fetch_stage;
   FOR ALL : lab10_WriteBack_Stage USE ENTITY lab10_WriteBack_Stage_lib.lab10_WriteBack_Stage;
   FOR ALL : memory_stage USE ENTITY lab10_memory_stage_lib.memory_stage;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_3 : memory_stage
      PORT MAP (
         Control      => Control_Out,
         Data_In      => DataOut,
         Dest         => Dest_Execute_Out,
         Extra        => Extra_Execute_Out,
         Result       => Result,
         clk          => clk,
         mdelay       => mdelay_toMemStage,
         Addr         => Addr,
         Control_toWB => Control_toWB,
         Data_Store   => Data_Store,
         Dest_toWB    => Dest_toWB,
         R            => R1,
         Value_toWB   => Value_toWB,
         W            => W,
         stall        => stall
      );
   U_6 : RegisterFile
      GENERIC MAP (
         RegWidth => 16,         -- The number of bits in each register
         RegSel   => 4
      )
      PORT MAP (
         ReadAddr_0   => ReadAddr_0,
         ReadAddr_1   => ReadAddr_1,
         RD0          => RD0,
         RD1          => RD1,
         WriteAddr    => Dest_toRegFile,
         WD           => Value_toRegFile,
         clock        => clk,
         write_enable => Control_toRegFile
      );
   U_4 : lab10_WriteBack_Stage
      PORT MAP (
         Control           => Control_toWB,
         Dest              => Dest_toWB,
         Value             => Value_toWB,
         clk               => clk,
         Control_toRegFile => Control_toRegFile,
         Dest_toRegFile    => Dest_toRegFile,
         Value_toRegFile   => Value_toRegFile
      );
   U_5 : MemoryArbiter
      PORT MAP (
         Addr_fromFetchStage => maddr,
         Addr_fromMemStage   => Addr,
         R                   => R1,
         W                   => W,
         reset               => reset,
         Addr_toMemory       => Addr_toMemory,
         Write_Control       => Write_Control,
         mdelay_toFetchStage => mdelay_toFetchStage,
         mdelay_toMemStage   => mdelay_toMemStage
      );
   U_8 : RegisterFile_Tracker
      GENERIC MAP (
         RegWidth  => 16,         -- The number of bits in each register
         addr_size => 4
      )
      PORT MAP (
         ReadAddr_0                  => ReadAddr_0,
         ReadAddr_1                  => ReadAddr_1,
         Mark_WriteAddr              => Dest,
         Clear_WriteAddr             => Dest_toRegFile,
         dependsOn_op1               => dependsOn_op1,
         dependsOn_op2               => dependsOn_op2,
         RegWrite_current            => RegWrite_current,
         RegWrite_previous           => Control_toRegFile,
         clock                       => clk,
         reset                       => reset,
         decode_pcval_out            => decode_pcval_out,
         decode_pcval_out_TrackerOut => decode_pcval_out_TrackerOut,
         can_move_on                 => can_move_on
      );
   U_7 : SRAM
      PORT MAP (
         Addr    => Addr_toMemory,
         DataIn  => Data_Store,
         clock   => clk,
         we      => Write_Control,
         DataOut => DataOut
      );
   U_0 : fetch_stage
      PORT MAP (
         can_move_on => can_move_on,
         clk         => clk,
         interrupt   => interrupt,
         jaddr       => jaddress,
         jump        => jump,
         mdata       => DataOut,
         mdelay      => mdelay_toFetchStage,
         reset       => reset,
         stall       => stall,
         inst        => inst,
         maddr       => maddr,
         pcval       => pcval
      );
   U_1 : Decode_stage
      GENERIC MAP (
         n           => 24,                                -- control output length
         n_toExecute => 16                                 -- control output length, sent to the execute stage
      )
      PORT MAP (
         inst             => inst,
         pcval            => pcval,
         A0               => ReadAddr_0,
         A1               => ReadAddr_1,
         RD0              => RD0,
         RD1              => RD1,
         L                => L,
         R                => R,
         Control          => Control,
         Dest             => Dest,
         Extra            => Extra,
         decode_pcval_out => decode_pcval_out,
         dependsOn_op1    => dependsOn_op1,
         dependsOn_op2    => dependsOn_op2,
         RegWrite_current => RegWrite_current,
         clock            => clk,
         stall            => stall,
         jump             => jump,
         can_move_on      => can_move_on
      );
   U_2 : execute_stage
      PORT MAP (
         Control           => Control,
         Dest              => Dest,
         Extra             => Extra,
         L                 => L,
         R                 => R,
         can_move_on       => can_move_on,
         clk               => clk,
         pcval             => decode_pcval_out,
         rst               => reset,
         stall             => stall,
         Control_Out       => Control_Out,
         Dest_Execute_Out  => Dest_Execute_Out,
         Extra_Execute_Out => Extra_Execute_Out,
         Result            => Result,
         jaddress          => jaddress,
         jump              => jump
      );

END struct;
